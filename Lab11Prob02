import java.io.*;
import java.util.ArrayList;

/**
* File: Lab11Prob02.java
* Class: CSCI 1302
* Author: Matteo Ventura, Naomi Oropesa, Sean Roe, Carter Kidd, Alexander Waters
* Created on: Apr 25, 2025
* Last Modified: Apr 25, 2025
* Description: Create a Person class, and organize it in an ArrayList; copy each age, name, address, zip code, and salary in each
* 	Person object in the arrayList. Sort the ArrayList in decreasing order by each Person's salary.
*/
public class Lab11Prob02 {
	
	public static void main(String[] args) {
		
		//Two Data Stream input/output for reading/writing bytes and converting them into primitive data types
		DataInputStream input;
		DataOutputStream output;
		
		//Create an ArrayList of type Person
		ArrayList<Person> personArrayList = new ArrayList<>();
		
		try {
			input = new DataInputStream(new FileInputStream("src/people.dat"));
						
			int value = 0;
			while(value < input.available()) {				
				personArrayList.add(new Person(input.readInt(), input.readUTF(), input.readUTF(), input.readInt(), input.readDouble()));
			}
			
		}catch(Exception ex) {
			System.out.println("File not found");
		}
		
		//Sort the ArrayList and copy the new ArrayList into a sorted data file
		java.util.Collections.sort(personArrayList);
		
		try {
			output = new DataOutputStream(new FileOutputStream("src/people-salary-sorted.dat"));
			
			//For each Person object in the ArrayList, write each object's toString() to the sorted file as a UTF
			for(Person e : personArrayList) {
				output.writeUTF(e.toString());
			}
			
			//Test: Print the contents of the sorted data file to ensure it was done correctly
			DataInputStream input2 = new DataInputStream(new FileInputStream("src/people-salary-sorted.dat"));
			int value = 0;
			while(value < input2.available()){
				System.out.print(input2.readUTF());
			}
			//Close input2 to prevent memory leakage
			input2.close();
			
		}catch(Exception ex) {
			System.out.println("Sorted file not found");
		}
	
	}

}

//Create Person class
class Person implements Comparable<Person>{
	
	private int age;
	private String fullName;
	private String address;
	private int zipCode;
	private double salary;
	
	public Person() {
		
	}
	public Person(int age, String fullName, String address, int zipCode, double salary) {
		setAge(age);
		setFullName(fullName);
		setAddress(address);
		setZipCode(zipCode);
		setSalary(salary);
	}
	
	//Getter and Setter: Age
	public int getAge() {
		return age;
	}
	public void setAge(int age) {
		this.age = age;
	}
	//Getter and Setter: FullName
	public String getFullName() {
		return fullName;
	}
	public void setFullName(String fullName) {
		this.fullName = fullName;
	}
	//Getter and Setter: Address
	public String getAddress() {
		return address;
	}
	public void setAddress(String address) {
		this.address = address;
	}
	//Getter and Setter: ZipCode
	public int getZipCode() {
		return zipCode;
	}
	public void setZipCode(int zipCode) {
		this.zipCode = zipCode;
	}
	//Getter and Setter: Salary
	public double getSalary() {
		return salary;
	}
	public void setSalary(double salary) {
		this.salary = salary;
	}
	
	@Override
	public String toString() {
		return String.format("%d %s %s %d $%,.2f", getAge(), getFullName(), getAddress(), getZipCode(), getSalary());
	}
	@Override
	public int compareTo(Person otherPerson) {
		if(this.getSalary() == otherPerson.getSalary()) {
			return 0;
		}else if(this.getSalary() < otherPerson.getSalary()) {
			return 1;
		}else {
			return -1;
		}
	}
}
